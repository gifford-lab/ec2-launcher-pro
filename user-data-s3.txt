#!/bin/bash
export DEBIAN_FRONTEND=noninteractive

sudo apt-get update
sudo apt-get -q -y install linux-image-extra-`uname -r`
sudo apt-get -q -y install nfs-common
sudo apt-get -q -y install apparmor-utils
[ -e /usr/lib/apt/methods/https ] || {
  sudo apt-get install apt-transport-https
}

## Install Docker and NVIDIA-docker
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates
sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
echo "deb https://apt.dockerproject.org/repo ubuntu-trusty main" | sudo tee /etc/apt/sources.list.d/docker.list
sudo apt-get update
sudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual

sudo apt-get update
sudo apt-get install -y docker-engine

sudo groupadd docker
sudo gpasswd -a ubuntu docker

sudo mkfs -t ext4 /dev/xvdf
sudo mkdir /scratch
sudo mount /dev/xvdf /scratch

sudo mkdir /scratch/docker
sudo mv /var/lib/docker /scratch/docker
sudo ln -s /scratch/docker /var/lib/docker
sudo echo 'DOCKER_OPTS="-g /scratch/docker -G docker"' >> /etc/default/docker
sudo service docker restart

wget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.0-rc.3/nvidia-docker_1.0.0.rc.3-1_amd64.deb
sudo dpkg -i /tmp/nvidia-docker*.deb && rm /tmp/nvidia-docker*.deb

# Set up AWSCLI and other user-specific setup
sudo apt-get -q -y install parallel python-pip
sudo pip install awscli
sudo mkdir ~/.aws
printf "[default]\naws_access_key_id=AKEY\naws_secret_access_key=SKEY" > ~/.aws/config
iname=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
aws --region us-east-1 --output text ec2 create-tags --resources $iname --tags Key=Name,Value=docker-USER-NUM

aws s3 cp s3://BUCKET_NAME/RUN_NAME/runparams/passwd /scratch/ --region REALM
sudo bash -c "cat /scratch/passwd >> /etc/passwd"
sudo usermod -a -G docker USER
sudo service docker restart

## Set up tmp folder
sudo sudo mkdir /scratch/tmp
sudo chmod -R 777 /scratch/tmp
sudo touch /scratch/done

# Set up GPU device
GPUMODE=GPUMODE_PARAM
if [ $GPUMODE = true ]; then
	/sbin/modprobe nvidia 
	if [ "$?" -eq 0 ]; then 
    	# Count the number of NVIDIA controllers found. 
    	NVDEVS=`lspci | grep -i NVIDIA` 
    	N3D=`echo "$NVDEVS" | grep "3D controller" | wc -l` 
    	NVGA=`echo "$NVDEVS" | grep "VGA compatible controller" | wc -l` 

    	N=`expr $N3D + $NVGA - 1` 
    	for i in `seq 0 $N`; do 
	  		mknod -m 666 /dev/nvidia$i c 195 $i 
	  	done 

    	mknod -m 666 /dev/nvidiactl c 195 255 
	else 
		exit 1 
	fi

	/sbin/modprobe nvidia-uvm 

	if [ "$?" -eq 0 ]; then 
  	# Find out the major device number used by the nvidia-uvm driver 
  	D=`grep nvidia-uvm /proc/devices | awk '{print $1}'` 

  	mknod -m 666 /dev/nvidia-uvm c $D 0 
	else 
    	exit 1 
	fi
fi

# Scp running commands from s3
sudo mkdir /scratch/input
sudo mkdir /scratch/output
sudo mkdir /scratch/runcmd
sudo mkdir /scratch/log
sudo mkdir /scratch/instance
sudo chmod -R 777 /scratch/instance
sudo chmod -R 777 /scratch/input
sudo chmod -R 777 /scratch/output
sudo chmod -R 777 /scratch/runcmd
sudo chmod -R 777 /scratch/log

aws s3 cp s3://BUCKET_NAME/RUN_NAME/input /scratch/input --region REALM --recursive
aws s3 cp s3://BUCKET_NAME/RUN_NAME/runcmd /scratch/runcmd --region REALM --recursive
sudo touch /scratch/instance/$iname
aws s3 cp /scratch/instance s3://BUCKET_NAME/RUN_NAME/instance --region REALM --recursive

# Run the scripts
sudo -u USER bash -c "cat /scratch/runcmd/RUNCMD | parallel -j 100% 2>&1 | tee /scratch/log/$iname.txt"

# Postprocess
SENDEMAIL=SEND_EMAIL
if [ $SENDEMAIL = true ]; then
	aws ses send-email --from EMAILADDR --to EMAILADDR --text "$(tail -n 50 /var/log/cloud-init-output.log)" --subject ec2_run_complete --region REALM
fi
cp /var/log/cloud-init-output.log /scratch/log/$iname-nohup.txt
aws s3 cp /scratch/output s3://BUCKET_NAME/RUN_NAME/output --region REALM --recursive
aws s3 cp /scratch/log s3://BUCKET_NAME/RUN_NAME/log --region REALM --recursive

# Terminate the process
sirname=$(aws --region us-east-1 --output text ec2 describe-spot-instance-requests | grep $iname | cut -d$'\t' -f7)
aws ec2 cancel-spot-instance-requests --spot-instance-request-ids $sirname --region REALM
aws ec2 terminate-instances --instance-ids $iname --region REALM
